# F1/10 individual vehicle control parameters (copy as needed)
# Author: Varundev Suresh Babu
# Date: 06/21/2019

controller_manager:
  ros__parameters:
      update_rate: 10  # Hz

      joint_state_broadcaster:
        type: joint_state_broadcaster/JointStateBroadcaster

ackermann_controller:
  ros__parameters:
    type: 'ackermann_steering_controller/AckermannSteeringController'
    reference_timeout: 2.0
    front_steering: true
    open_loop: false
    velocity_rolling_window_size: 10
    position_feedback: false
    rear_wheels_names: ['rear_right_wheel', 'rear_left_wheel']
    front_wheels_names: ['front_left_wheel', 'front_right_wheel']

    wheelbase: 0.325
    front_wheel_track: 0.2
    rear_wheel_track: 0.2
    front_wheels_radius: 0.05
    rear_wheels_radius: 0.05
    in_chained_mode: false

# TODO: Re-implement the controllers below and set up the custom controller created by varundevsukhil
# https://github.com/haritsahm/simulator/blob/code_refactor/src/control_plugin.py <- takes speed and angle and sends it to the wheel controllers, simulating limits on acceleration

# this might not be necessary since joint torque limits are already present in the URDF file

# left_rear_wheel_velocity_controller:
#   type: effort_controllers/JointVelocityController
#   pid: { p: 1.0, i: 0.0, d: 0.0, i_clamp: 0.0 }

# right_rear_wheel_velocity_controller:
#   type: effort_controllers/JointVelocityController
#   pid: { p: 1.0, i: 0.0, d: 0.0, i_clamp: 0.0 }

# left_front_wheel_velocity_controller:
#   type: effort_controllers/JointVelocityController
#   pid: { p: 0.5, i: 0.0, d: 0.0, i_clamp: 0.0 }

# right_front_wheel_velocity_controller:
#   type: effort_controllers/JointVelocityController
#   pid: { p: 0.5, i: 0.0, d: 0.0, i_clamp: 0.0 }

# left_steering_hinge_position_controller:
#   type: effort_controllers/JointPositionController
#   pid: { p: 1.0, i: 0.0, d: 0.5 }

# right_steering_hinge_position_controller:
#   type: effort_controllers/JointPositionController
#   pid: { p: 1.0, i: 0.0, d: 0.5 }